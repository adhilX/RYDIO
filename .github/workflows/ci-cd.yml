name: CI/CD - Build & Deploy to EC2 (Docker Compose)

on:
  push:
    branches:
      - main

env:
  APP_NAME: rydio-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Verify secrets
      - name: Verify secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] || \
             [ -z "${{ secrets.DOMAIN_NAME }}" ] || [ -z "${{ secrets.EC2_HOST }}" ] || \
             [ -z "${{ secrets.EC2_USER }}" ] || [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ] || \
             [ -z "${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}" ]; then
            echo "Error: One or more secrets are not set"
            exit 1
          fi

      # 2Ô∏è‚É£ Checkout code
      - name: Checkout repo
        uses: actions/checkout@v4

      # 3Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4Ô∏è‚É£ Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5Ô∏è‚É£ Build & Push Backend Image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rydio-backend:${{ github.sha }}

      # 6Ô∏è‚É£ Compute Image URI
      - name: Compute image URI
        id: image-uri
        run: echo "IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/rydio-backend:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # 7Ô∏è‚É£ Create deploy folder
      - name: Create deploy folder
        run: mkdir -p deploy

      # 8Ô∏è‚É£ Verify deploy-compose.yml exists
      - name: Verify deploy-compose.yml exists
        run: |
          if [ ! -f backend/deploy/deploy-compose.yml ]; then
            echo "Error: backend/deploy/deploy-compose.yml not found"
            exit 1
          fi
          cat backend/deploy/deploy-compose.yml  # Debug: Show contents

      # 9Ô∏è‚É£ Render Production docker-compose.yml
      - name: Render deploy docker-compose.yml
        run: |
          IMAGE=${{ steps.image-uri.outputs.IMAGE }}
          sed "s|REPLACE_WITH_IMAGE_TAG|${IMAGE}|g" backend/deploy/deploy-compose.yml > deploy/deploy-compose.generated.yml
          echo "Generated deploy-compose.generated.yml with image: $IMAGE"
          if [ ! -f deploy/deploy-compose.generated.yml ]; then
            echo "Error: Failed to generate deploy/deploy-compose.generated.yml"
            exit 1
          fi
          cat deploy/deploy-compose.generated.yml  # Debug: Show generated file

      # üîü Verify Nginx template exists
      - name: Verify Nginx template exists
        run: |
          if [ ! -f backend/nginx/rydio.conf.template ]; then
            echo "Error: backend/nginx/rydio.conf.template not found"
            exit 1
          fi
          cat backend/nginx/rydio.conf.template  # Debug: Show contents

      # 1Ô∏è‚É£1Ô∏è‚É£ Render Nginx config
      - name: Render Nginx config
        run: |
          DOMAIN=${{ secrets.DOMAIN_NAME }}
          BACKEND_PORT=3003
          GRAFANA_PORT=3000
          sed "s|REPLACE_WITH_DOMAIN|${DOMAIN}|g; \
               s|REPLACE_WITH_BACKEND_HOST|127.0.0.1|g; \
               s|REPLACE_WITH_BACKEND_PORT|${BACKEND_PORT}|g; \
               s|REPLACE_WITH_GRAFANA_HOST|127.0.0.1|g; \
               s|REPLACE_WITH_GRAFANA_PORT|${GRAFANA_PORT}|g" \
          backend/nginx/rydio.conf.template > deploy/rydio.conf
          echo "Nginx config rendered for domain ${DOMAIN}"
          if [ ! -f deploy/rydio.conf ]; then
            echo "Error: Failed to generate deploy/rydio.conf"
            exit 1
          fi
          cat deploy/rydio.conf  # Debug: Show generated file

      # 1Ô∏è‚É£2Ô∏è‚É£ Verify Prometheus config exists
      - name: Verify Prometheus config exists
        run: |
          if [ ! -f backend/prometheus-config.yml ]; then
            echo "Error: backend/prometheus-config.yml not found"
            exit 1
          fi
          cat backend/prometheus-config.yml  # Debug: Show contents

      # 1Ô∏è‚É£3Ô∏è‚É£ Copy Prometheus config
      - name: Copy Prometheus config
        run: |
          cp backend/prometheus-config.yml deploy/
          if [ ! -f deploy/prometheus-config.yml ]; then
            echo "Error: Failed to copy deploy/prometheus-config.yml"
            exit 1
          fi
          cat deploy/prometheus-config.yml  # Debug: Show copied file

      # 1Ô∏è‚É£4Ô∏è‚É£ Verify deploy folder
      - name: List deploy folder
        run: |
          ls -l deploy/
          if [ -z "$(ls -A deploy/)" ]; then
            echo "Error: Deploy folder is empty"
            exit 1
          fi

      # 1Ô∏è‚É£5Ô∏è‚É£ Copy deployment files to EC2
      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: |
            deploy/deploy-compose.generated.yml
            deploy/rydio.conf
            deploy/prometheus-config.yml
          target: ${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}
          working-directory: ${{ github.workspace }}
          debug: true  # Enable debug logging

      # 1Ô∏è‚É£6Ô∏è‚É£ SSH into EC2 and deploy
      - name: SSH - Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            cd ${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}
            docker compose -f deploy-compose.generated.yml pull
            docker compose -f deploy-compose.generated.yml up -d --remove-orphans
            sudo mv rydio.conf /etc/nginx/conf.d/rydio.conf
            sudo nginx -t
            sudo systemctl reload nginx || sudo service nginx reload
            echo "Deployment successful at $(date)"