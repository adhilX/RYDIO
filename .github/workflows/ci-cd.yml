name: CI/CD - Build & Deploy to EC2 (Docker Compose)

on:
  push:
    branches:
      - main

env:
  APP_NAME: rydio-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3️⃣ Login to DockerHub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4️⃣ Build & Push Backend Image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rydio-backend:${{ github.sha }}

      # 5️⃣ Compute Image URI
      - name: Compute image URI
        id: image-uri
        run: echo "IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/rydio-backend:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # 6️⃣ Render Production docker-compose.yml
      - name: Render deploy docker-compose.yml
        run: |
          IMAGE=${{ steps.image-uri.outputs.IMAGE }}
          mkdir -p deploy
          sed "s|\${IMAGE}|${IMAGE}|g" backend/deploy/deploy-compose.yml > deploy/deploy-compose.generated.yml
          echo "Generated deploy-compose.generated.yml with image: $IMAGE"

      # 7️⃣ Render Nginx config with domain and ports
      - name: Render Nginx config
        run: |
          mkdir -p deploy
          DOMAIN=${{ secrets.DOMAIN_NAME }}
          BACKEND_PORT=3003
          GRAFANA_PORT=3000
          sed -e "s|REPLACE_WITH_DOMAIN|${DOMAIN}|g" \
              -e "s|REPLACE_WITH_BACKEND_HOST|localhost|g" \
              -e "s|REPLACE_WITH_BACKEND_PORT|${BACKEND_PORT}|g" \
              -e "s|REPLACE_WITH_GRAFANA_HOST|localhost|g" \
              -e "s|REPLACE_WITH_GRAFANA_PORT|${GRAFANA_PORT}|g" \
              backend/nginx/rydio.conf.template > deploy/rydio.conf
          echo "Nginx config rendered for domain ${DOMAIN}"

      # 8️⃣ Copy deployment files to EC2
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: |
            deploy/deploy-compose.generated.yml
            deploy/rydio.conf
            backend/prometheus-config.yml
          target: ${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}

      # 9️⃣ SSH into EC2 and deploy
      - name: SSH - Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            cd ${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}
            docker compose -f deploy-compose.generated.yml pull
            docker compose -f deploy-compose.generated.yml up -d --remove-orphans
            sudo mv rydio.conf /etc/nginx/conf.d/rydio.conf
            sudo nginx -t
            sudo systemctl reload nginx || sudo service nginx reload
            echo "Deployment successful at $(date)"
