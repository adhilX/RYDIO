name: CI/CD - Build & Deploy to EC2 (Docker Compose)

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/ci-cd.yml'

env:
  APP_NAME: rydio-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3️⃣ Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4️⃣ Build & Push Backend Image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rydio-backend:${{ github.sha }}

      # 5️⃣ Compute Image URI
      - name: Compute image URI
        id: image-uri
        run: echo "IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/rydio-backend:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # 6️⃣ Prepare deploy folder
      - name: Prepare deploy folder
        run: |
          mkdir -p deploy
          echo "PORT=${{ secrets.PORT }}" >> deploy/.env
          echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> deploy/.env
          echo "ACCESS_TOKEN_KEY=${{ secrets.ACCESS_TOKEN_KEY }}" >> deploy/.env
          echo "REFRESH_TOKEN_KEY=${{ secrets.REFRESH_TOKEN_KEY }}" >> deploy/.env
          echo "EMAIL_ID=${{ secrets.EMAIL_ID }}" >> deploy/.env
          echo "PASS=${{ secrets.PASS }}" >> deploy/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> deploy/.env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> deploy/.env
          echo "NODE_ENV=production" >> deploy/.env
          echo "ORIGIN=${{ secrets.ORIGIN }}" >> deploy/.env

          # Replace backend image
          sed "s|REPLACE_WITH_IMAGE_TAG|${{ steps.image-uri.outputs.IMAGE }}|g" backend/deploy/deploy-compose.yml > deploy/deploy-compose.generated.yml
          # Replace domain and ports in nginx config
          DOMAIN=${{ secrets.DOMAIN_NAME }}
          BACKEND_HOST=localhost
          BACKEND_PORT=${{ secrets.PORT }}
          GRAFANA_HOST=localhost
          GRAFANA_PORT=3000
          sed -e "s|REPLACE_WITH_DOMAIN|${DOMAIN}|g" \
              -e "s|REPLACE_WITH_BACKEND_HOST|${BACKEND_HOST}|g" \
              -e "s|REPLACE_WITH_BACKEND_PORT|${BACKEND_PORT}|g" \
              -e "s|REPLACE_WITH_GRAFANA_HOST|${GRAFANA_HOST}|g" \
              -e "s|REPLACE_WITH_GRAFANA_PORT|${GRAFANA_PORT}|g" \
              backend/nginx/rydio.conf.template > deploy/rydio.conf
          # Copy prometheus config into deploy folder
          cp backend/prometheus-config.yml deploy/

      # 7️⃣ Copy deployment files to EC2
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: deploy/
          target: ${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}

      # 8️⃣ SSH into EC2 and deploy
      - name: SSH - Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            cd ${{ secrets.DOCKER_COMPOSE_REMOTE_PATH }}/deploy
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker compose -f deploy-compose.generated.yml pull
            sudo docker compose -f deploy-compose.generated.yml up -d --remove-orphans
            echo "Deployment successful at $(date)"